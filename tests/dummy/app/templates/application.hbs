<div class="container">
  <div class="row">
    <h1>ember-redux-firebase</h1>
  </div>

  <div class="row byline">
    An Ember addon which provides a Firebase API surface for
    the &nbsp; <code>ember-redux-core</code> &nbsp; addon
  </div>

  <h2 class="row downer">API Surface</h2>
  <div class="row downer">
    <ul>
      <li>
        <code>auth</code> 
        <br>
        Authorization against the various methods that Firebase provides, including:
        <ul>
          <li>Google</li>
          <li>Facebook</li>
          <li>Twitter</li>
          <li>Github</li>
          <li>Email and Password</li>
          <li>Anonymous</li>
        </ul>
      </li>
      <li>
        <code>ref</code>
        <br>
        Get a reference to a path in the database.
      </li>
      <li>
        <code>watch</code>
        <br>
        Setup watching on a path in the database which will trigger an redux action dispatch
        whenever 
      </li>
      <li>
        <code>unwatch</code>
        <br>
        Remove a previously setup <i>watch</i> to free up system resources
      </li>
    </ul>
  </div>

  <h2 class="row downer">USAGE</h2>
  <div class="row downer">

    <h4>Configuration</h4>
    <p>
      By installing this addon you gain access to the {{tag 'firebase' mood='success'}} service. In order for this service to correctly connect to your database you'll need to configure it in your <i>environment.js</i>. You can get the specific configuration by navigating to the Firebase console and choosing "Overview > Add Firebase to your web app". The configuration will looks something like:
    </p>
    <p>
<pre><code>  module.exports = function(environment) {
  var ENV = {
    firebase: {
      apiKey: "AIzaRyBJANsBXIIrIMF1w1VLwfm7DrD_TV2J2I4",
      authDomain: "ember-redux-firebase.firebaseapp.com",
      databaseURL: "https://ember-redux-firebase.firebaseio.com"
    },
</code></pre>
    </p>
  </div>
  <div class="row downer">
    <h4>Connection</h4>
    <p>
      Since Ember services load lazily, you will not have actually connected to the database yet but as soon as the service is loaded you'll see the dispatch of the following actions:
    </p>
    <ul>
      <li>FIREBASE_CONNECT</li>
      <li>FIREBASE_DISCONNECT</li>
    </ul>
  </div>
  <div class="row">
    <p class="col-9">
      By pressing the button to the right you will load the service. Try pressing this while having the Redux Inspector up.
    </p>
    <p class="col">
      {{ui-button 'load service' onClick=(action 'loadService')}}
    </p>
    <p>
      It may seem odd at first that you got <i>both</i> the DISCONNECTED and the CONNECTED event to start but this will make more sense when you realise that what is happening is we are setting up a real-time event that will detect all current and future changes in connection state. This helps us to understand when the client is offline (due to network failure, etc.) and when we've come back online.
    </p>
  </div>

  <div class="row">
    <h4>References</h4>
    <p>
      Once connected the {{tag 'ref'}} method of the service gives you a "reference" to the database at any given part of the state tree. In this demo let's retrieve <i>hello</i> path from the database:
    </p>
<pre class="col-8"><code>
firebase.ref('hello').once('value', (snapshot) => {
  console.log(snapshot.val());
});
</code></pre>
    <p class="col-4">
      <p>&nbsp;</p>
      {{ui-button 'execute' onClick=(action 'referenceCheck')}}
      <br>
      <i>check console for output</i>
    </p>
    <p>
      You can look at the demo database yourself (defined in this repo's <i>database-rules.json</i>) and see that the rules allow for any and everyone to access the "hello" path. Ok, we're connected. Feels good but now let's get authenticated.
    </p>

    <h4>Authentication</h4>
    <p>
      A really nice feature of Firebase is its ability to authenticate users without the need for huge amounts of code. So in one way, the firebase <i>service</i> being provided in this addon is simply proxing the Firebase API along to the user. However, this addon's primary function is to integrate a Firebase database access with the Redux state management solution so when using the various authentication methods this addon will <i>dispatch</i> one or more of the following actions:
      </p>
      <p>
      <ul>
        <li>AUTH_REQUEST { provider }</li>
        <li>AUTH_SUCCESS { provider, user }</li>
        <li>AUTH_FAILURE { provider, message }</li>
        <li>CURRENT_USER_CHANGED { uid, profile }</li>
      </ul>
      The Firebase's API exposed by proxying Firebase's {{tag 'firebase.auth()'}} API. By using the service provided here -- versus the Firebase API directly -- you get the same interaction with the database but you also get the appropriate actions dispatched to redux which allows your application's reducers to appropriately shape the state tree.
    </p>
    <p>
      So let's walk through an example. Using the form below we'll allow you to login with a username/password combination. 
    </p>
    <div class="col-6">
      <div class="row">
        <div class="col-2">
          Username:
        </div>
        <div class="col-6">
          {{text-input
            username
            placeholder: 'username'
            onChange=(mut username)
          }}
        </div>
      </div>
      <div class="row">
        <div class="col-2"> 
          Password:
        </div>
        <div class="col">
          {{password-input
            password
            placeholder: 'password'
            onChange=(mut password)
          }}
        </div>
      </div>
      <div class="row">
        {{ui-button 'login' 
          onClick=(action 'login' username password) 
        }}
      </div>
    </div>
    <div class="col">
      <ul>
        <li>email: person@email.com</li>
        <li>password: firebase</li>
      </ul>
    </div>

  </div>
  <div class="row downer">
    <p>
      You can see that using the configured username/password successfully authenticates whereas other combinations report back an error.
    </p>

    <h6 class="row col-12">Logging Out</h6>
    <p>
      Logging a user out is straight-forward, in code it is just:
    </p>
    <pre class="row col-12"><code>  firebase.auth().signOut();</code></pre>
    <p>
      You can press the button to execute that here: 
      {{ui-button 'sign out' 
        onClick=(action 'signOut') 
      }}
    </p>

    <h6 class="row col-12">Testing for Authentication</h6>
    <p>
      The {{pill 'firebase'}} service does a computed property {{tag 'isAuthenticated'}} which can be used to test if the Firebase database is currently authenticated. There are two things which should be considered when using this:
    </p>
    <ol>
      <li>
        <b>Offline</b><br>
        The Firebase client library maintains the connection to the database even if the brower/client is reloaded. That means that unless you are using state initializers, your other forms of state will drop off on a reload but this check will still correctly report back the state of the Firebase connection.
      </li>
      <li>
        <b>Redux State</b>
        Who doesn't love a computed property right? Well of course we all do but whether the system is <i>authenticated</i> is really an important part of STATE and in Redux the goal would be to manage all of that state in the 
      </li>
    </ol>
    <p>
      {{ui-button 'check whether logged in' onClick=(action 'checkAuthenticated')}}
    </p>
  </div>

  <div class="row downer">
    <h4>Watching</h4>
    <p>
      One of the nicest aspects of a real-time database life Firebase is that you can specify a path in the database that you will watch for updates. When an update comes you will be immediately notified of the change. 
    </p>
    <h6>Types of Listeners</h6>
    <p>
      The most common way to listen for change is using a "value listener" which will give you the full tree at the reference's path whenever there is a change in the tree. You could create this manually with the following code:
    </p>
    <pre><code>  firebase.ref('users').on('value', snapshot => {...})</code></pre>
    <p>
      In fact, this kind of code is very common when you look for examples of Firebase queries on the web. And while this kind of listener strategy is very effective for small amounts of data (typically a node rather than a list of nodes). When you start to have larger sets of data then you'll want to employ child listeners which return only the child nodes which have <i>changed</i> rather than the full list of nodes. To do this case you'll need separate listeners for <i>create</i>, <i>update</i>, and <i>remove</i> events. 
    </p>
    <p>
      <b>Note:</b> if you're familiar with the <i>emberfire</i> addon, it provides real-time functions by adding a "value listener" on any model where you call the {{pill 'findAll()'}} method. This is good <i>shorthand</i> but -- as stated above -- becomes quite inefficient for large lists.
    </p>
    <h6 class="downer">Watch API</h6>
    <p>
      In both cases (node and list), however, this API provides a declaritive way to perform either strategy and plug into the Redux state management:
    </p>
    <ul>
      <li>
        <b>Node</b>
        <pre><code>firebase.watch().node('/users/1234', 'USER_PROFILE', options);</code></pre>
        <p>
          This will setup a "value" listener on the leaf node and send a {{pill 'USER_PROFILE_UPDATED'}} action every time there is an update to the user profile.
        </p>
      </li>
      <li>
        <b>List</b>
        <pre><code>firebase.watch().list('/users', 'USER', options);</code></pre>
        <p>
          This will setup "child_added", "child_removed", and "child_updated" events that will send appropriately named actions (e.g., {{pill 'USER_ADDED'}}, etc.) when the list located at '/users' changes. 
        </p>
      </li>
    </ul>
    <p>
      In both cases -- <i>list</i> and <i>node</i> -- the {{pill 'options'}} parameter can be used to build more complex 
    </p>

    <p>
      <b>Note:</b> the "ac" parameter can either be an action creator <i>function</i> (as illustrated above) or just the name of the action type to be emitted. In this latter case you might have something like:
    </p>
    <pre><code>  firebase.watch('/users', 'USER_PROFILE')</code></pre>
    <p>
      Where the above would dispatch events of type USER_PROFILE_ADDED, USER_PROFILE_CHANGED, USER_PROFILE_REMOVED.
    </p>

    <h6>Unwatch</h6>
    <p>
      Once a a watch is setup, it remains set until it is explicitly <i>unset</i>. In order to be efficient with resources we must clean up after ourselves and this is achieved with the {{tag 'firebase.unwatch()'}} API endpoints:
    </p>
    <ul>
      <li><code>node(ref)</code> - removes "value" event at given reference</li>
      <li><code>list(ref)</code> - removes "add", "change", and "remove" events at given reference</li>
      <li>
        <code>all()</code> 
        - removes all watcher references
      </li>
    </ul>
  </div>

  <div class="row">
    <h4>Current User Profile</h4>
    <p>
      A very common requirement for an application is to have the logged in user's profile available (and kept up-to-date when changed) as a handy reference to application code. The Firebase Auth system has a limited user profile that it defines and if that's all you need there is nothing else needed as this will be returned as part of both the AUTH_SUCCESS and CURRENT_USER_CHANGED actions. Many applications though have their own user profiles which structurally fit into the limited properties that Firebase allows. In order to provide easy access to this richer user profile data you may opt-in with:
    </p>
    <pre><code>  firebase.currentUserProfile(path, cb = null);</code></pre>
    <p>
      The {{tag 'path'}} parameter indicates the path in the Firebase DB where the list of User Profiles reside. It also assumes that the User Profiles are keyed by 'uid' (which is what the Authentiation system uses). If you leave the path parameter blank then it will default to "/users". Once enabled, the CURRENT_USER_CHANGED action will also include "profile" property off of the "user" property which will contain the broader user profile.
    </p>
    <p>
      Optionally you can also also specify the {{tag 'cb'}} parameter which acts as a callback when the user profile has been updated. This will allow you to do any other actions that are needed once a user is logged in or out. The callbacks should be higher-order functions which are structured as:
    </p>
    <pre class="row col-12"><code>  fn(context) => (snap) => {...}</code></pre>
    <p>
      The first call will be set at configuration time, the second will be executed at the USER_PROFILE_CHANGED event. Typically the context call will be a reference to the {{pill 'firebase'}} service but it can be any context that will serve as useful for the callbacks to operate at the point of the event.
    </p>
    <p>
      {{ui-button 'load user profile with auth'
        onClick=(action 'getUserProfileForCurrentUser')
      }}
    </p>
  </div>

</div>

{{outlet}}
